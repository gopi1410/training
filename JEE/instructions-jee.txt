Download: JEEWeb.pdf from github.com/maruthirj/training
Download: db-derby-10.11.1.1-bin.zip
Download: mydb.zip

Instructions to build the first servlet:
----------------------------------------
Unzip tomcat in some folder
Launch eclipse and create a new "Dynamic Web Project"
Click on "Window"->"Preferences"-> server -> runtime environments
Click on "Add" button to add the tomcat server.
Specify the folder where you unzipped tomcat

Now right click project->properties->java build path->click on "libraires" tab
Click "Add Library" -> Server runtime -> select the tomcat server listed there
Now look at the PDF and create a servlet in a package such as com.mydomain.servlets
Right click the servlet -> run as -> run on server

Run tomcat on command line
-----------------------------------------
open command prompt
Change directory to your tomcat\bin folder
set JAVA_HOME=c:\program files\java\jdk8
(Make sure u put a proper existing folder path above)
type the command: startup.bat
It should popup a window that should stay open. Make sure eclipse server is stopped.
Now open browser and access "http://localhost:8080/"

-----------------------------------------
Create two html files
Form.html - pick up form code from the PDF
thankyou.html - Just some text such as <h2> Thank you for the info </h2>

Put these HTMLs into WebContent folder
You will be able to access these HTMLs from url
example: http://localhost:8080/Training/Form.html

Then try the servlet in Slide 15 of the PDF as a new servlet
Make sure the action="" attribute of the form points the servlet url

Change this:
request.getRequestDispatcher("thankyou.html").forward(request, response);

TO this:

response.sendRedirect("thankyou.html");

-----------------------------------------
Create a wizard
Form.html posts name and address to Servlet1
Servlet1 code is on page 12 of JEEWebNotes.pdf
When that UI is submitted, it goes to Servlet2
Servlet2 code is on page 13.

Change servlet2 to render the name and phone number to response instead of
forwarding to thankyou.html
-----------------------

Steps to start database:

open windows command prompt
cd c:\whereeverYouUnzippedDerby\db-derby-10.11.1.1-bin\bin
set DERBY_HOME=..\
setNetworkServerCP
startNetworkServer

For loops in JSP
----------------------------------------
<%for(int i=0; i< 10; i++){ %>
Thank you for submitting your data <%=request.getAttribute("name") %>
<% } %>

Instructions to build user listing:
----------------------------------------
Download UserManager.java and User.java from github

Place these classes in your eclipse project 
Edit UserManager.java to change the database connection url like this:
jdbc:derby://localhost:1527/c:/whereever/mydb/mydb

Copy derbyclient.jar from db-derby-10.11.1.1-bin\lib into WebContent\WEB-INF\lib

Create a new servlet called "ListUsersServlet" with @WebServlet("/ListUsers")
In the doGet method, call UserManager.getAllUsers()
The resultant list, set it as a request attribute and forward to "ListUsers.jsp"

Create a new JSP called ListUsers.jsp
get the users from request using something like this:request.getAttribute("users")
Now loop thru the users and render User name and Age in table structure
Use scriptlets and expressions to loop thru

On browser access http://localhost:8080/Training/ListUsers and it should show a 
list of users on screen from database
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	try{
		UserManager u = new UserManager();
		List<User> users = u.getAllUsers();
		request.setAttribute("users",users);
		request.getRequestDispatcher("ListUsers.jsp").forward(request, response);
	}catch(Exception e){
		throw new ServletException(e);
	}
}


<%@page import="com.mydomain.model.User"%>
<table>
<tr><td>Name</td><td>Age</td></tr>
<% List<User> users = (List<User>)request.getAttribute("users"); 
	for(User u : users){
%>
<tr><td><%=u.getName()%></td><td><%=u.getAge()%></td></tr>
<% } %>
</table>

Add a new user
------------------------------------------
Create a new jsp called "userForm.jsp"
It should have a form with fields "name" and "age" and a submit button
Create a link on the ListUsers.jsp to this new jsp
<a href="userForm.jsp">Add User</a>

Create a new servlet called "UserAddServlet" 
@WebServlet("/userAdd")
In the doPost method accept the name and age parameter, create a user object
and call UserManager's addUser() method
After adding, forward to /ListUsers servlet
//WRONG: request.getRequestDispatcher("/ListUsers").forward(req,res);
response.sendRedirect("ListUsers");

put this method in ListServlet

protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
	doGet(req,resp);
}

Change the userForm.jsp to send the request to this new servlet
action="userAdd"

Edit a new user
------------------------------------------
Create a link next to each user in the table for editing the user
This link should go to the LoadServlet and have the id param
<a href="LoadUser?id=<%=u.getId()%>">Edit</a>

Create a new servlet LoadServlet @WebServlet("/LoadUser")
doGet()...
	Integer id = Integer.parseInt(request.getParameter("id"));
	User u = (new UserManager()).getUser(id);
	request.setAttribute("user", u);
	request.getRequestDispatcher("UserForm.jsp").forward(request, response);

Modify UserForm.jsp to hold the id of the user in a hidden field
<% User u = (User)request.getAttribute("user"); 
if (u==null){
	u = new User();
}else{%>
	<input type="hidden" value="<%=u.getId()%>" name="id"></input>
<%}%>
Name: <input type="text" name="name" value="<%=u.getName()%>"></input><br>
Age: <input type="text" name="age" value="<%=u.getAge()%>"></input><br>

Modify AddServlet to check "id" parameter. If available it should 
call UserManager's updateUser(), else call addUser()

User u = new User();
if(request.getParameter("id")!=null)
	u.setId(Integer.parseInt(request.getParameter("id")));
u.setName(request.getParameter("name"));
u.setAge(Integer.parseInt(request.getParameter("age")));
UserManager mgr = new UserManager();
if(u.getId()==null){
	mgr.addUser(u);	
}else{
	mgr.updateUser(u);
}
-------------------------------------
Final Part: Delete
-------------------------------
No need to create any JSP for delete
Create a link next to each user for deleting 
<a href="DeleteUser?id=<%=u.getId()%>">Delete</a>

Create a new servlet DeleteUserServlet @WebServlet("DeleteUser")
doGet()...
	Integer id = Integer.parseInt(request.getParameter("id"));
	UserManager mgr = new UserManager();
	mgr.deleteUser(id);
	response.sendRedirect("listServlet");

Download 3 jar files + web.xml + error.jsp from github
Place the web.xml in WebContent\WEB-INF
Place the jar files in WebContent\WEB-INF\lib
Place the error.jsp in WebContent 

Make a code error to perpetually cause some null pointer error
Restart server and cause the error
-------------------------------------------
Filter

In web.xml create a filter definition above the error pages section
<filter>
    <filter-name>TestFilter</filter-name>
    <filter-class>com.mydomain.MyTestFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>TestFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

Create a new class MyTestFilter:
public class MyTestFilter implements Filter {
	public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException {
		System.out.println("Filter Before");
		chain.doFilter(request, response);
		System.out.println("Filter After");
	}
}
Put System.out.println() in your ListUserServlet and ListUsers.jsp

Access the user listing page and see the order of the printouts on console
--------------------------------
User Auth with Filters

Create a new JSP loginForm.jsp with only a userName field
Create a new servlet LoginServlet. This accepts the userName parameter, calls the
UserManager.doesUserExist function. 
If true, 
	set userName as a session attribute and redirect to ListServlet, 
else
	FORWARD to loginForm.jsp
String name = request.getParameter("name");
UserManager um = new UserManager();
User u = um.doesUserExist(name);
if (u != null) {
	request.getSession().setAttribute("user", u);
	response.sendRedirect("listServlet");
}else{
	request.getRequestDispatcher("loginPage.jsp").forward(req,res);
}
Modify MyTestFilter:

HttpServletRequest req = (HttpServletRequest)request;
HttpServletResponse res = (HttpServletResponse)response;
Object u = req.getSession().getAttribute("user");
if(u!=null || req.getRequestURI().contains("LoginServlet") 
	|| req.getRequestURI().contains("loginForm")){
	chain.doFilter(request, response);
}else{
	res.sendRedirect("loginPage.jsp");
}
---------------------------------------
RMI:
-------------------------------------
Open a command window
Change to the folder where the classes of your project is generated
cd ProjectFolder\build\classes
Run these commands: 
set path="C:\program files\java\jdk...\bin";%path%
set classpath=.
rmiregistry

Get back to eclipse
RMIServer -> right click -> Run as Java application
RMIClient -> right click -> Run as Java application

-------------------------------------
File upload:
in the UserForm, add a new field to upload user's profile picture
<input type="file" name="pic"></input>

Submit this form during use addition and observe the data that is sent to the 
server in the BROWSER developer console
------------------------------------
Eclipse -> Help -> install new software
Click add button:
Name: JBoss
Location: http://download.jboss.org/jbosstools/updates/stable/luna/

Select: Jboss Web and Java EE Development -> JBoss AS Tools

http://107.108.70.17:8080/WebProfile/jboss-as-7.1.0.Final.zip
-------------------------------------------
REST Project 
Download tomcat 8 and unzip in some folder
In eclipse create a new Maven project.
While creating the project, 
select "maven-archetype-webapp" as the archetype
Specify "RestSample" as the groupId and artifactId
Finish

Pick up REST\pom.xml from github
Copy the "dependencies" section from that xml into the pom.xml in your eclipse project

Now setup integration with tomcat8
Eclipse->window->preferences->server->runtime environments->add
Select apache tomcat8, specify the folder where you unzipped tomcat

Now right click project->run on server-> choose tomcat8 to run 

Pickup RestApplication.java from github 
Create a new class called UserResource
@Path("/users")
public class UserResource {
	@GET
	@Path("/{param}")
	@Produces({ MediaType.APPLICATION_JSON })
	public User getUser(@PathParam("param") Integer id) {
		//Get one user based on id (Use UserManager from other project)
	}

	@GET
	@Produces({ MediaType.APPLICATION_JSON })
	public List<User> getUsers() {
		//get all users
	}
}

Deploy app and test by accessing the url:
http://localhost:8080/RestSample/services/users
and
http://localhost:8080/RestSample/services/users/300

Create a new method in UserResource to handle post requests
@POST
@Consumes({ MediaType.APPLICATION_JSON })
public void createUser(User u) {
	//Use userManager to save the new user
}

-----------------
set JAVA_HOME=c:\program files\java\jdk1.7_25
standalone.bat

Create a new EJB inside the User listing project we already have
Copy jboss-as-7.1.1.Final/modules/javax/ejb/api/main
						/jboss-ejb-api_3.1_spec-1.0.1.Final.jar
into WebContent/WEB-INF/lib
In UserManagerLocal interface define 
public List<User> getAllUsers() throws Exception;

In UserManager EJB
Implement the method getAllUsers
Copy the database implementation code to getAllUsers
public List<User> getAllUsers() throws Exception{
		Statement statement = con.createStatement();
		ResultSet rs = statement.executeQuery("select * from users");
		List<User> users = new ArrayList<User>();
		while(rs.next()){
			...
		}
		return users;
	}

In ListUserServlet class, define a dependency like this:
@EJB
UserManagerLocal userManager;

In doGet() method
System.out.println(userManager);
userManager.getAllUsers()

Right click project->export war file
Copy exported war file into jboss\standalone\deployments folder
Start JBoss and make sure no exceptions occur.
Access the web app user listing screen on browser and verify EJB calling
--------------------------------------------
Configure database connection pool 
--------------------------------------------
Deploy the derbyclient.jar in modules\org\apache\derby\main along 
with a module.xml (Shared)

Setup a driver and datasource segment in standalone.xml (Shared)

Obtain connection using datasource in EJB's business method:
	InitialContext ic = new InitialContext();
	DataSource ds = (DataSource) ic.lookup("java:/DerbyDS");
	con = ds.getConnection();
...
...
	con.close();
---------------------------------------------
Bulk delete changes for listUser servlet

<form action="bulkDelete">
	<%
	List<User> users = (List<User>)request.getAttribute("users");
	for(User user: users){
	%>
	<tr>
	<td><input type="checkbox" name="selectedIds" value="<%=user.getId()%>"/></td>
	<td><%=user.getName()%></td><td><%=user.getAge() %></td>
	<td><a href="deleteServlet?id=<%=user.getId()%>">Delete</a></td>
	<td><a href="loadForEditServlet?id=<%=user.getId()%>">Edit</a></td>
	</tr> 
<%
}
%>
	<input type="submit" value="Delete Selected"/>
</form>

IN BULK DELETE SERVLET - doGet method:
--------
String[] idStrArr = request.getParameterValues("selectedIds");
List<Integer> ids = new ArrayList<Integer>();
for (String idStr : idStrArr) {
	Integer id = Integer.parseInt(idStr);
	ids.add(id);
}
userManager.deleteUsers(ids);
response.sendRedirect("listServlet");

EJB Code:
--------
@EJB
UserManagerLocal umLocal;

@TransactionAttribute(TransactionAttributeType.REQUIRED)
public void deleteUsers(List<Integer> ids){
	for(Integer id: ids){
		umLocal.deleteUser(id);
		System.out.println("Deleting :"+id);
		if(id%3==0){
			throw new NullPointerException("Something went wrong");
		}
	}
}
@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
public void deleteUser(Integer id){
	InitialContext ic = new InitialContext();
	DataSource ds = (DataSource) ic.lookup("java:/DerbyDS");
	con = dataSource.getConnection();
	Statement st = con.createStatement();
	st.execute("delete from users where id="+id);	
	con.close();
}

SIX transaction attributes:
---------------------------
1. Does it run in a transaction?
2. What happens to incoming transaction?

MANDATORY
1. Yes
2. Expected Mandatorily, else exception
NEVER
1. No
2. Exception if it exists
NOT_SUPPORTED
1. No
2. Suspended
REQUIRED
1.Yes
2.Continues if there is an incoming transaction
REQUIRES_NEW
1. Yes
2. Suspended
SUPPORTS 
1. May be
2. If exists, it runs in that transaction, else without transaction


Transactions in JDBC
--------------------
con = DriverManager.getConnection();
con.setAutoCommit(false);
Statement st = con.createStatement();
st.execute("delete from users where id="+id);	
con.commit();
con.close();

--------------------
Start a new EJB project
Right click the project and create a new "Message Driven Bean"
destination name: email_queue
Destination type: queue
This will create a new class with an onMessage method. Put this code in it
public void onMessage(Message message) {
	System.out.println("Processing Message: " + message);
	TextMessage tm = (TextMessage) message;
	System.out.println("Message : " + tm.getText());
}

Add as external jar jboss-as-7.1.1.Final/modules/javax/ejb/api/main
						/jboss-ejb-api_3.1_spec-1.0.1.Final.jar
					jboss-as-7.1.1.Final/modules/javax/jms/api/main
						/jboss-jms-api_1.1_spec-1.0.0.Final.jar
edit standalone-full.xml
Find <jms-destinations> tag and configure a queue there by adding this section
<jms-queue name="email_queue">
	<entry name="queue/email_queue"/>
    <entry name="java:jboss/exported/jms/queue/email_queue"/>
</jms-queue>
Stop JBOSS
Export the project as an EJB jar and deploy it by copying it to deployments folder
Start jboss with standalone-full confguration using a command like this:
standalone.bat -c standalone-full.xml 

Pick up MQClientServlet from github and deploy it and access it				
























