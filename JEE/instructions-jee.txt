Download: JEEWeb.pdf from github.com/maruthirj/training
Download: db-derby-10.11.1.1-bin.zip
Download: mydb.zip

Instructions to build the first servlet:
----------------------------------------
Unzip tomcat in some folder
Launch eclipse and create a new "Dynamic Web Project"
Click on "Window"->"Preferences"-> server -> runtime environments
Click on "Add" button to add the tomcat server.
Specify the folder where you unzipped tomcat

Now right click project->properties->java build path->click on "libraires" tab
Click "Add Library" -> Server runtime -> select the tomcat server listed there
Now look at the PDF and create a servlet in a package such as com.mydomain.servlets
Right click the servlet -> run as -> run on server

Run tomcat on command line
-----------------------------------------
open command prompt
Change directory to your tomcat\bin folder
set JAVA_HOME=c:\program files\java\jdk8
(Make sure u put a proper existing folder path above)
type the command: startup.bat
It should popup a window that should stay open. Make sure eclipse server is stopped.
Now open browser and access "http://localhost:8080/"

-----------------------------------------
Create two html files
Form.html - pick up form code from the PDF
thankyou.html - Just some text such as <h2> Thank you for the info </h2>

Put these HTMLs into WebContent folder
You will be able to access these HTMLs from url
example: http://localhost:8080/Training/Form.html

Then try the servlet in Slide 15 of the PDF as a new servlet
Make sure the action="" attribute of the form points the servlet url

Change this:
request.getRequestDispatcher("thankyou.html").forward(request, response);

TO this:

response.sendRedirect("thankyou.html");

-----------------------------------------
Create a wizard
Form.html posts name and address to Servlet1
Servlet1 code is on page 12 of JEEWebNotes.pdf
When that UI is submitted, it goes to Servlet2
Servlet2 code is on page 13.

Change servlet2 to render the name and phone number to response instead of
forwarding to thankyou.html
-----------------------

Steps to start database:

open windows command prompt
cd c:\whereeverYouUnzippedDerby\db-derby-10.11.1.1-bin\bin
set DERBY_HOME=..\
setNetworkServerCP
startNetworkServer

For loops in JSP
----------------------------------------
<%for(int i=0; i< 10; i++){ %>
Thank you for submitting your data <%=request.getAttribute("name") %>
<% } %>

Instructions to build user listing:
----------------------------------------
Download UserManager.java and User.java from github

Place these classes in your eclipse project 
Edit UserManager.java to change the database connection url like this:
jdbc:derby://localhost:1527/c:/whereever/mydb/mydb

Copy derbyclient.jar from db-derby-10.11.1.1-bin\lib into WebContent\WEB-INF\lib

Create a new servlet called "ListUsersServlet" with @WebServlet("/ListUsers")
In the doGet method, call UserManager.getAllUsers()
The resultant list, set it as a request attribute and forward to "ListUsers.jsp"

Create a new JSP called ListUsers.jsp
get the users from request using something like this:request.getAttribute("users")
Now loop thru the users and render User name and Age in table structure
Use scriptlets and expressions to loop thru

On browser access http://localhost:8080/Training/ListUsers and it should show a 
list of users on screen from database
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	try{
		UserManager u = new UserManager();
		List<User> users = u.getAllUsers();
		request.setAttribute("users",users);
		request.getRequestDispatcher("ListUsers.jsp").forward(request, response);
	}catch(Exception e){
		throw new ServletException(e);
	}
}


<%@page import="com.mydomain.model.User"%>
<table>
<tr><td>Name</td><td>Age</td></tr>
<% List<User> users = (List<User>)request.getAttribute("users"); 
	for(User u : users){
%>
<tr><td><%=u.getName()%></td><td><%=u.getAge()%></td></tr>
<% } %>
</table>

Add a new user
------------------------------------------
Create a new jsp called "userForm.jsp"
It should have a form with fields "name" and "age" and a submit button
Create a link on the ListUsers.jsp to this new jsp
<a href="userForm.jsp">Add User</a>

Create a new servlet called "UserAddServlet" 
@WebServlet("/userAdd")
In the doPost method accept the name and age parameter, create a user object
and call UserManager's addUser() method
After adding, forward to /ListUsers servlet
//WRONG: request.getRequestDispatcher("/ListUsers").forward(req,res);
response.sendRedirect("ListUsers");

put this method in ListServlet

protected void doPost(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
	doGet(req,resp);
}

Change the userForm.jsp to send the request to this new servlet
action="userAdd"

Edit a new user
------------------------------------------
Create a link next to each user in the table for editing the user
This link should go to the LoadServlet and have the id param
<a href="LoadUser?id=<%=u.getId()%>">Edit</a>

Create a new servlet LoadServlet @WebServlet("/LoadUser")
doGet()...
	Integer id = Integer.parseInt(request.getParameter("id"));
	User u = (new UserManager()).getUser(id);
	request.setAttribute("user", u);
	request.getRequestDispatcher("UserForm.jsp").forward(request, response);

Modify UserForm.jsp to hold the id of the user in a hidden field
<% User u = (User)request.getAttribute("user"); 
if (u==null){
	u = new User();
}else{%>
	<input type="hidden" value="<%=u.getId()%>" name="id"></input>
<%}%>
Name: <input type="text" name="name" value="<%=u.getName()%>"></input><br>
Age: <input type="text" name="age" value="<%=u.getAge()%>"></input><br>

Modify AddServlet to check "id" parameter. If available it should 
call UserManager's updateUser(), else call addUser()

User u = new User();
if(request.getParameter("id")!=null)
	u.setId(Integer.parseInt(request.getParameter("id")));
u.setName(request.getParameter("name"));
u.setAge(Integer.parseInt(request.getParameter("age")));
UserManager mgr = new UserManager();
if(u.getId()==null){
	mgr.addUser(u);	
}else{
	mgr.updateUser(u);
}
-------------------------------------
Final Part: Delete
-------------------------------
No need to create any JSP for delete
Create a link next to each user for deleting 
<a href="DeleteUser?id=<%=u.getId()%>">Delete</a>

Create a new servlet DeleteUserServlet @WebServlet("DeleteUser")
doGet()...
	Integer id = Integer.parseInt(request.getParameter("id"));
	UserManager mgr = new UserManager();
	mgr.deleteUser(id);
	response.sendRedirect("listServlet");




































