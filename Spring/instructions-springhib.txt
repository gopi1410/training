from http://github.com/maruthirj/training
Download: db-derby-10.11.1.1-bin.zip
Download: mydb.zip
Download tomcat:
http://107.108.53.191:8080/WebProj/tools/apache-tomcat-8.0.23-windows-x86.zip
Download eclipse:
http://107.108.206.119:8080/Training/eclipse.zip

-----------------------------------------
Create a new maven project in eclipse
Download pom.xml from github (Use the "raw" button to download)
Copy the <dependencies> section from the shared pom.xml into the pom.xml in your
																			project
Once you save the pom.xml all dependencies will be downloaded.
If you see errors on pom.xml, 
right click project -> maven -> update project -> force update -> ok

Download application-context.xml, User.java from github
Create two classes UserManager and UserDaoImpl and one interface UserDao
Setup setter methods on UserManager to refer to UserDao
Configure the xml
<bean id="userManager" class="com.mydomain.biz.UserManager">
	<property name="dao" ref="userDao"></property>    
</bean>
<bean id="userDao" class="com.mydomain.dao.UserDaoImpl">
</bean>


This code goes into a new class called SpringTester (in main method)
ApplicationContext context = new ClassPathXmlApplicationContext
(new String[] {"application-context.xml"});
UserManager mgr = (UserManager)context.getBean("userManager");
List<User> users = mgr.getAllUsers();
System.out.println(users);

public class UserManager {

	private UserDao dao;

	public UserDao getDao() {
		return dao;
	}
	public void setDao(UserDao dao) {
		this.dao = dao;
	}
	public List<User> getAllUsers() {
		return dao.getAllUsers();
	}
}

--------------------------------------------
Proxy
--------------------------------------------
package com.mydomain;

import java.lang.reflect.Method;
import java.rmi.RemoteException;

public class ProxyImpl implements java.lang.reflect.InvocationHandler {

	private Object obj;

	public static Object newInstance(Object obj) {
		return java.lang.reflect.Proxy.newProxyInstance(obj.getClass()
				.getClassLoader(), obj.getClass().getInterfaces(),
				new ProxyImpl(obj));
	}

	private ProxyImpl(Object obj) {
		this.obj = obj;
	}

	public Object invoke(Object proxy, Method m, Object[] args)
			throws Throwable {
		Object result;
		try {
			//do something before
			System.out.println("Actions before invoke of: "+m.getName());
			System.out.println(this);
			result = m.invoke(obj, args);
			System.out.println("Actions after method invoke...");
			//do something after
		} catch (Exception e) {
			throw new RuntimeException("unexpected invocation exception: "
					+ e.getMessage());
		}
		return result;
	}

	public static void main(String[] args) throws RemoteException {
		UserDaoImpl target = new UserDaoImpl();
		UserDao proxy = (UserDao)ProxyImpl.newInstance(target);
		System.out.println(proxy.getClass().getName());
		List<User> users = proxy.getAllUsers();
		System.out.println("Users: "+users);
	}
}
-----------------------------------
Steps to start database:

open windows command prompt
cd c:\whereeverYouUnzippedDerby\db-derby-10.11.1.1-bin\bin
set DERBY_HOME=..\
setNetworkServerCP
startNetworkServer

Replace the DAO implementation with the one provided on share
Edit the connection information to look like this:
(NOTICE THE SINGLE SLASH AFTER 1527)
jdbc:derby://localhost:1527/C:/whereever/mydb/mydb

Test it and you should see actual user objects retrieved from the DB

Securing UserDAOImpl
-------------------------------------------
Create an interface:
public interface AuthEnabler {
	public Object secureInvoke(Method m, String user, String password, Object... args);
}

Copy the ProxyImpl class you have and create a new class AuthProxyImpl
In the newInstance method, use code like this to get a list of interfaces:
List<Class> interfaces = new ArrayList(Arrays.asList(obj.getClass().getInterfaces()));
interfaces.add(AuthEnabler.class);
Class[] classArr = interfaces.toArray(new Class[1]);

In the invoke method, we do authentication like this:
if(m.getName().equals("secureInvoke")){
	//Perform auth and call the target method
	Method targetMethod = (Method)args[0];
	String user = (String)args[1];
	String pass = (String)args[2];
	if(user.equals("admin") && pass.equals("admin123")){
		Object[] methodArgs = Arrays.copyOfRange(args, 3, args.length-1);
		return targetMethod.invoke(obj, methodArgs);	
	}else{
		throw new Exception("Authentication info denied");
	}
}else{
	//Direct method invocation - prevent it
	throw new Exception("Authentication info not provided");
}

Our client code will now be like this:
UserDaoImpl daoImpl = new UserDaoImpl();
UserDao secureDao = (UserDao)AuthProxyImpl.newInstance(daoImpl);
secureDao.getAllUser();//Will throw an exception


Method getAllUsers = UserDao.class.getMethod("getAllUsers");
AuthEnabler ae = (AuthEnabler)AuthProxyImpl.newInstance(daoImpl);
System.out.println(ae.secureInvoke(getAllUsers,"admin","admin123"));
--------------------
Copy the ProxyImpl class and create a new class called ClientProxyImpl
In the newInstance method, make a check to ensure we are proxying the authproxy
public static Object newInstance(Object obj) {
	if(!(obj instanceof AuthEnabler)){
		throw new IllegalArgumentException("This class can only proxy Auth Enabled classes");
	}
	return java.lang.reflect.Proxy.newProxyInstance(obj.getClass()
				.getClassLoader(), obj.getClass().getInterfaces(),
				new ProxyImpl(obj));
}

In the invoke method, make sure we are only calling target methods:
if(m.getName().equals("secureInvoke")){
	//This should never be called directly
	throw new IllegalStateException("Secure invoke should not be called on the client proxy directly. Call the target method");
}else{
	//Grab auth info and call the secureInvoke method on the target
	String user = "admin";
	String pass = "admin123";
	return ((AuthEnabler)obj).secureInvoke(m, user, pass, args);
}

Client:
-------
UserDaoImpl daoImpl = new UserDaoImpl();
UserDao secureDao = (UserDao)AuthProxyImpl.newInstance(daoImpl);
UserDao clientDao = (UserDao)ClientProxyImpl.newInstance(secureDao);
System.out.println(clientDao.getAllUsers());

Using Factory Beans in spring
------------------------------
Create an AuthProxyFactory class
public class AuthProxyFactory implements FactoryBean {
	//Secure bean that needs proxying to pass the security info
	Object beanToSecure;
	public Object getBeanToSecure() {
		return beanToSecure;
	}
	public void setBeanToSecure(Object beanToSecure) {
		this.beanToSecure = beanToSecure;
	}
	public Object getObject() throws Exception {
		return AuthProxyImpl.newInstance(beanToSecure);
	}
	public Class getObjectType() {
		return null;
	}
	public boolean isSingleton() {
		return true;
	}
}

Create a ClientProxyFactory class
public class ClientProxyFactory implements FactoryBean {
	//Secure bean that needs proxying to pass the security info
	Object secureBean;
	public Object getSecureBean() {
		return secureBean;
	}
	public void setSecureBean(Object secureBean) {
		this.secureBean = secureBean;
	}
	public Object getObject() throws Exception {
		return ClientProxyImpl.newInstance(secureBean);
	}
	public Class getObjectType() {
		return null;
	}
	public boolean isSingleton() {
		return true;
	}
}

In application-context.xml define this configuration
<!-- Secure Bean Setup -->
	<bean name="dao" class="com.mydomain.dao.UserDaoImpl"></bean>
	<bean name="secureDao" class="com.mydomain.security.AuthProxyFactory">
		<property name="beanToSecure" ref="dao"></property>
	</bean>
	
	<bean id="authenticatedDao" name="authenticatedDao" 		
					class="com.mydomain.security.ClientProxyFactory">
		<property name="secureBean" ref="secureDao"></property>
	</bean>
	
	<bean id="userManager" class="com.mydomain.biz.UserManager">
		<property name="dao" ref="authenticatedDao"></property>    
	</bean>

	
In main method:

UserManager mgr = (UserManager)context.getBean("userManager");
List<User> users = mgr.getAllUsers();
------------------------------
Using post processor to secure the beans

Create a new annotation class in Secure.java
@Retention(RetentionPolicy.RUNTIME)
public @interface Secure {

}

Define a secure bean post processor:

public class SecurityBeanPostProcessor implements BeanPostProcessor {
	public Object postProcessBeforeInitialization(Object bean, String beanName)
			throws BeansException {
		if (bean.getClass().isAnnotationPresent(Secure.class) ) {
			return AuthProxyImpl.newInstance(bean);
		} else {
			return bean;
		}
	}
	public Object postProcessAfterInitialization(Object bean, String beanName)
			throws BeansException {
		return bean;
	}
}

Put the @Secure annotation on UserDaoImpl class

Define this in the application-context.xml:
<bean name="dao" class=“com.mydomain.dao.UserDaoImpl"></bean>
<bean class="com.mydomain.security.SecurityBeanPostProcessor"></bean>

	
<bean id="authenticatedDao" name="authenticatedDao" 		
					class="com.mydomain.security.ClientProxyFactory">
		<property name="secureBean" ref="dao"></property>
</bean>

Test by invoking the same old client code that calls UserManager
-------------------------------------------------
Creating aspects
Create a new class called LoggingAspect
@Component
@Aspect
public class LoggingAspect {

	
	@Before( value="execution(* getAll*(..))")
    public void logMethodCallstart(JoinPoint joinPoint) {
		System.out.println("Executing before method: "+joinPoint.getSignature().getName());
    }
	
	@AfterReturning(returning="retVal", value="execution(* getAll*(..))")
    public void logMethodCallEnd(Object retVal) {
		System.out.println("returning Value: "+retVal);
    }
	
	@AfterThrowing(throwing="exception",value="execution(* getAll*(..))")
	public void logErrors(Throwable exception){
		System.out.println("Error happened: "+exception);
	}
	
	@Around("execution(* getAll*(..))")
    public Object doBasicProfiling(ProceedingJoinPoint pjp) throws Throwable {
        long start = System.nanoTime();
        Object retVal = pjp.proceed();
        long end = System.nanoTime();
        System.out.println("Time taken(ms): "+(end-start)/1000);
        return retVal;
    }
}

In application-context.xml
Disable SecureBeanPostprocessor and ClientProxyFactory
Enable AOP auto config:
<context:component-scan base-package="com.mydomain.*" />
<context:annotation-config />
<aop:aspectj-autoproxy/>

In UserManager::getAllUsers(){
	System.out.println("DAO = "+dao.getClass().getName());
	....
}

In main()
UserManager mgr = (UserManager)context.getBean("userManager");
System.out.println("MGR = "+mgr.getClass().getName());
List<User> users = mgr.getAllUsers();

---------------------------------------------------
Custom Tx Manager
------------------
Create a new class called CustomTxManager as an aspect
@Component
@Aspect
public class CustomTxManager {
}
define a getConnection() method:
	private Connection getConnection() throws Exception{
			Class.forName("org.apache.derby.jdbc.ClientDriver");
			return DriverManager.getConnection("jdbc:derby://localhost:1527/c:/mydb");	
	}
	
Define :
public static ThreadLocal<Connection> threadLocalConnections = new ThreadLocal<>();

In this class define a method to be around advice:
	@Around("execution(public * com.mydomain.UserDao.*(..))”)
    public Object startTransactions(ProceedingJoinPoint pjp) throws Throwable {
		Connection con = getConnection();
		con.setAutoCommit(false);
		Object result=null;
		try{
			threadLocalConnections.set(con);
			result = pjp.proceed();
			con.commit();
		}finally{
			threadLocalConnections.get().close();			
		}
		return result;
	}

In UserDAO.getAllUsers()
	Connection con = CustomTxManager.threadLocalConnections.get();
	...
---------------------------------
Make UserDaoImpl an abstract class like this with a lookup method:
public abstract class UserDaoImpl implements UserDao {
	
	public abstract Connection getCon();
	
	public List<User> getAllUsers() throws Exception{
		Statement statement = getCon().createStatement();
		...

Define a new FactoryBean that will read the connection from the threadlocal

public class CustomTxConnectionFactory implements FactoryBean<Connection>{

	public Connection getObject() throws Exception {
		return CustomTxManager.threadLocalConnections.get();
	}
...

Configure the beans in XML:
<bean name="dao" class="com.mydomain.dao.UserDaoImpl">
	<lookup-method name="getCon" bean="connection" />
</bean>
	
<bean name="connection" class=“com.mydomain.aop.CustomTxConnectionFactory” scope="prototype"/>
-------------------------------------
Spring MVC App
-------------------------------------
Create a new Maven project by selecting the archetype "maven-archetype-webapp"
Insert the dependencies from the pom.xml provided on github
Next is to configure the Dispatcher servlet into web.xml thus:
<servlet>
	<servlet-name>action</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	<load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
	<servlet-name>action</servlet-name>
	<url-pattern>/action/*</url-pattern>
</servlet-mapping>

Create a new class called HelloWorldController in some package

@Controller
public class HelloWorldController {

    @RequestMapping("/helloWorld")
    public String helloWorld(Model model) {
        model.addAttribute("message", "Hello World!");
        return “/helloWorld”;
    }
}

helloWorld.jsp - put this in WEB-INF\Views folder (this folder needs to be created)
<%@ page isELIgnored="false"%>
<h2>${message}</h2>

Copy application-context.xml from the previous project and place it in WEB-INF
folder. Rename it as action-servlet.xml.
Add this section into it:

<context:component-scan base-package="com.mydomain.*" />
<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
<mvc:annotation-driven />
<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<property name="prefix" value="/WEB-INF/Views/" />
	<property name="suffix" value=".jsp" />
</bean>

**Folder in WEB-INF/Views should have V in upper case
**return value from Controller should match JSP name in case
**base-package="com.mydomain.*" if your controller is in com.mydomain.controller pack
** Url to test is http://localhost:8080/projectname/action/helloWorld
** helloWorld in url should match helloWorld in RequestMapping annotation case sensitive

MOVE helloWorld.jsp directly under webapp
and change this:
<property name="prefix" value="/" />

<%
	Enumeration<String> names =  request.getAttributeNames();
	while(names.hasMoreElements()){
		String name = names.nextElement();
		System.out.println("Name: "+name+" Value: "+request.getAttribute(name));
	}
%>

User addition:
---------------
Pickup userform.jsp from github
put it in WEB-INF/Views folder
Define a new controller - UserController
@Controller
public class UserController {
	@Autowired
	UserManager userManager;
	
	@RequestMapping("/userForm")
	public String showUserForm(Model model){
		Integer[] ages = new Integer[]{18,19,20,21,22,23,24,25,26,27,28,29,30};
		model.addAttribute("ages",ages);
		return "UserForm";
	}
	
    @RequestMapping("/addUser")
    public String addUser(User u, Model model) throws Exception {
    	userManager.addUser(u);
        model.addAttribute("message", "Added User!");
        return "helloWorld";
    }
}

Bring in the UserManager, UserDao, User related classes from other project
Make sure UserManager and UserDaoImpl has @component and @AutoWired annotations
Test by accessing this url: http://localhost:8080/WebApp/action/userForm

----------------------------------------------
Controller:
@RequestMapping("/listUsers")
    public String listUsers(Model model) throws Exception{
    	List<User> users = userManager.getAllUsers();
    	model.addAttribute("users",users);
    	return "ListUsers";
    }
    
User ListUsers.jsp:
<table>
<%
List<User> users = (List<User>)request.getAttribute("users");
for(User user: users){
%>
<tr><td></td><td><%=user.getName()%></td><td><%=user.getAge() %></td><td></tr> 
<%
}
%>
</table>

---------------------------------------------
JSON Data from spring controller

Create a controller method of this kind
@RequestMapping(value="/listUsersJson", produces = MediaType.APPLICATION_JSON_VALUE)
@ResponseBody
public String listUsersJson() throws Exception{
    	List<User> users = userManager.getAllUsers();
    	String usersJson = JSONObject.valueToString(users);
    	return usersJson;
}
In the index.jsp, create a button and onclick of the button, load the data
<script type="text/javascript" src="scripts/jquery-2.1.3.js"></script>
<script type="text/javascript">

function loadUsers(){
	$.ajax(	{
		url: 'action/listUsersJson',
		method: 'get',
		headers: { 'Accept': 'application/json' }, 
		success: function(data) {
			$("#userTable").html("");
			for(var index in data){
				var row = "<tr><td>"+data[index].name+"</td><td>"+data[index].age+"</td></tr>";
				$("#userTable").append(row);
			}
		}
	});
}
</script>
<input type="button" onclick="loadUsers()" value="Load"></input>
<div id="userTable">Data will load here...</div>

Copy jquery-2.1.3.js from github to webapp\scripts folder
----------------------------
Remoting with spring

Create a new interface called UserManagerRemote like this
public interface UserManagerRemote extends Remote{
	public List<User> getAllUsers() throws Exception;
	...
}

UserManager implements UserManagerRemote{
User implements Serializable{

In application-context.xml we export this object as a remote service
<bean id="userManager" class="com.mydomain.UserManager">
</bean>
<bean class="org.springframework.remoting.rmi.RmiServiceExporter">
    <property name="serviceName" value="UserManager"/>
    <property name="service" ref="userManager"/><!-- This is the bean name of the userManager bean -->
    <property name="serviceInterface" value="com.mydomaim.biz.UserManagerRemote"/>
    <property name="registryPort" value="1199"/>
    <property name="alwaysCreateRegistry" value="true"/>
</bean>

Create a new class with main method with this code:
String name = "UserManager";
Registry registry = LocateRegistry.getRegistry("localhost",1199);
UserManagerRemote um = (UserManagerRemote) registry.lookup(name);
List<User> users = um.getAllUsers();
System.out.println(users);

Run the original main method to load the UserManager
Run the new main method to invoke the server as a client
----------------------
Download Squirrel SQL client:
http://107.108.206.119:8080/Training/squirrel-sql-3.6-standard.jar
Install it, Choose apache derby plugin while installing
Launch Squirrel from start menu
Click on Drivers tab on left hand side
Select "apache derby client" and click on the pencil icon on top to edit it
Click on "Extra classpath" tab and click "Add" button
Select derbyclient.jar from the already available db-derby-10.11.1.1-bin\lib folder
Click ok

Creating an alias:
Click on aliases tab and click the plus icon to add a new alias
Give any name
JDBC URL - copy from the code (DAO class).
jdbc:derby://localhost:1527/c:/whereever/mydb
Username: APP
password: app
Click Test
Then OK
Double click the alias to open a view to the database
------------------------------
Hibernate Starter:

Create a new Maven project (Skip archetype selection)
Pickup the pom3.xml from github for dependencies
Make sure you have a folder - src\main\java (Create if not there)
Copy the existing User.java from the other projects
Pickup hibernate.cfg.xml and users.hbm.xml from github
Place both these XMLs in src\main\java
Edit hibernate.cfg.xml
	Change the location of your database
	Change the location of the user.hbm.xml
Create a new Java class with main method

Configuration configuration = new Configuration().configure("hibernate.cfg.xml");
         ServiceRegistry serviceRegistry
             = new StandardServiceRegistryBuilder()
                 .applySettings(configuration.getProperties()).build();
SessionFactory sessionFactory = configuration.buildSessionFactory(serviceRegistry);

Session session = sessionFactory.openSession();
List<User> userList = session.createQuery("select u from User u”).list();
System.out.println(userList);
session.close();

Test it by running as Java application
----------------------------------
<class name="com.mydomain.model.Products" table="PRODUCTS">
		<id name="id" type="int">
			<column name="ID" />
			<generator class="native" />
		</id>
		<version column="version" name="version" type="int" insert="true" />
		<property name="productName" >
			<column name="PRODUCT_NAME" length="500" not-null="true" />
		</property>
		<property name="productPrice">
			<column name="PRODUCT_PRICE" precision="10" />
		</property>
</class>
		
Setting big decimal values:
p1.setProductPrice(new BigDecimal(10.1).setScale(2, RoundingMode.HALF_UP));

public class Product {

	private Integer id;
	private String productName;
	private BigDecimal productPrice;
	private Integer version;
	private Integer stock;
	
	Include getter setter methods here
}

Session s1 = sessionFactory.openSession();
		Session s2 = sessionFactory.openSession();
		Transaction t1 = s1.beginTransaction();
		Transaction t2 = s2.beginTransaction();
		Products p1 = (Products)s1.
				createQuery("select p from Products p where id=3").uniqueResult();
		System.out.println("Reading p2");
		Products p2 = (Products)s2.
				createQuery("select p from Products p where id=3").uniqueResult();
		p1.setProductPrice(new BigDecimal(10.1).setScale(2, RoundingMode.HALF_UP));
		p2.setProductPrice(new BigDecimal(10.2).setScale(2, RoundingMode.HALF_UP));
		System.out.println("Saving p1");
		s1.save(p1);
		System.out.println("Saving p2");
		s2.save(p2);
		System.out.println("Committing t1");
		t1.commit();
		System.out.println("Committing t2");
		t2.commit();
		s1.close();
		s2.close();
		System.out.println("Done");




















