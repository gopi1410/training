from http://github.com/maruthirj/training
Download: db-derby-10.11.1.1-bin.zip
Download: mydb.zip
Download tomcat:
http://107.108.53.191:8080/WebProj/tools/apache-tomcat-8.0.23-windows-x86.zip
Download eclipse:
http://107.108.206.119:8080/Training/eclipse.zip

-----------------------------------------
Create a new maven project in eclipse
Download pom.xml from github (Use the "raw" button to download)
Copy the <dependencies> section from the shared pom.xml into the pom.xml in your
																			project
Once you save the pom.xml all dependencies will be downloaded.
If you see errors on pom.xml, 
right click project -> maven -> update project -> force update -> ok

Download application-context.xml, User.java from github
Create two classes UserManager and UserDaoImpl and one interface UserDao
Setup setter methods on UserManager to refer to UserDao
Configure the xml
<bean id="userManager" class="com.mydomain.biz.UserManager">
	<property name="dao" ref="userDao"></property>    
</bean>
<bean id="userDao" class="com.mydomain.dao.UserDaoImpl">
</bean>


This code goes into a new class called SpringTester (in main method)
ApplicationContext context = new ClassPathXmlApplicationContext
(new String[] {"application-context.xml"});
UserManager mgr = (UserManager)context.getBean("userManager");
List<User> users = mgr.getAllUsers();
System.out.println(users);

public class UserManager {

	private UserDao dao;

	public UserDao getDao() {
		return dao;
	}
	public void setDao(UserDao dao) {
		this.dao = dao;
	}
	public List<User> getAllUsers() {
		return dao.getAllUsers();
	}
}

--------------------------------------------
Proxy
--------------------------------------------
package com.mydomain;

import java.lang.reflect.Method;
import java.rmi.RemoteException;

public class ProxyImpl implements java.lang.reflect.InvocationHandler {

	private Object obj;

	public static Object newInstance(Object obj) {
		return java.lang.reflect.Proxy.newProxyInstance(obj.getClass()
				.getClassLoader(), obj.getClass().getInterfaces(),
				new ProxyImpl(obj));
	}

	private ProxyImpl(Object obj) {
		this.obj = obj;
	}

	public Object invoke(Object proxy, Method m, Object[] args)
			throws Throwable {
		Object result;
		try {
			//do something before
			System.out.println("Actions before invoke of: "+m.getName());
			System.out.println(this);
			result = m.invoke(obj, args);
			System.out.println("Actions after method invoke...");
			//do something after
		} catch (Exception e) {
			throw new RuntimeException("unexpected invocation exception: "
					+ e.getMessage());
		}
		return result;
	}

	public static void main(String[] args) throws RemoteException {
		UserDaoImpl target = new UserDaoImpl();
		UserDao proxy = (UserDao)ProxyImpl.newInstance(target);
		List<User> users = proxy.getAllUsers();
		System.out.println("Users: "+users);
	}
}

